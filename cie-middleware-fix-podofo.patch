From febd6fb92e36dae93bb925c07b64455a6a3e7d5f Mon Sep 17 00:00:00 2001
From: Luca Magrone <luca@magrone.cc>
Date: Sat, 12 Oct 2024 16:10:24 +0200
Subject: [PATCH] cie_sign_sdk: podofo: adapt code for unpatched version of
 podofo

The SDK provides a patched version of PoDoFo. Unfortunately no source
code is available at the moment so we need to change some code to be
able to compile and link against podofo

Signed-off-by: Luca Magrone <luca@magrone.cc>
---
 cie_sign_sdk/src/PdfSignatureGenerator.cpp | 97 +++++++++++-----------
 1 file changed, 50 insertions(+), 47 deletions(-)

diff --git a/cie_sign_sdk/src/PdfSignatureGenerator.cpp b/cie_sign_sdk/src/PdfSignatureGenerator.cpp
index be4dc0c..d35cd92 100644
--- a/cie_sign_sdk/src/PdfSignatureGenerator.cpp
+++ b/cie_sign_sdk/src/PdfSignatureGenerator.cpp
@@ -27,10 +27,7 @@ USE_LOG;
 
 PdfSignatureGenerator::PdfSignatureGenerator()
 : m_pPdfDocument(NULL), m_pSignatureField(NULL), m_pSignOutputDevice(NULL), m_pFinalOutDevice(NULL),
-m_pMainDocbuffer(NULL), m_pSignDocbuffer(NULL)
-{
-	PoDoFo::PdfError::EnableLogging(false);
-}
+m_pMainDocbuffer(NULL), m_pSignDocbuffer(NULL) {}
 
 PdfSignatureGenerator::~PdfSignatureGenerator()
 {
@@ -68,15 +65,13 @@ int PdfSignatureGenerator::Load(const char* pdf, int len)
         printf("STOP");
 
 		m_pPdfDocument = new PdfMemDocument();
-		m_pPdfDocument->Load(pdf, len);
-		printf("OK m_pPdfDocument");
+		m_pPdfDocument->LoadFromBuffer(pdf, len, false);
+
 		int nSigns = PDFVerifier::GetNumberOfSignatures(m_pPdfDocument);
 		printf("OK nSigns: %d", nSigns);
 
-		if(nSigns > 0)
-		{
-			m_pPdfDocument->SetIncrementalUpdates(true);
-		}
+		printf("OK m_pPdfDocument");
+
 		m_actualLen = len;
 		
 		return nSigns;
@@ -97,8 +92,8 @@ void PdfSignatureGenerator::AddFont(const char* szFontName, const char* szFontPa
 	//printf(szFontPath);
 	
 	
-	PdfFont* font = m_pPdfDocument->CreateFont(szFontName, false, false, PdfEncodingFactory::GlobalWinAnsiEncodingInstance(), PdfFontCache::eFontCreationFlags_AutoSelectBase14, true, szFontPath);
-	PdfFont* font1 = m_pPdfDocument->CreateFont(szFontName, true, false, PdfEncodingFactory::GlobalWinAnsiEncodingInstance(), PdfFontCache::eFontCreationFlags_AutoSelectBase14, true, szFontPath);
+	PdfFont* font = m_pPdfDocument->CreateFont(szFontName, false, false, true, PdfEncodingFactory::GlobalWinAnsiEncodingInstance(), PdfFontCache::eFontCreationFlags_AutoSelectBase14, true, szFontPath);
+	PdfFont* font1 = m_pPdfDocument->CreateFont(szFontName, true, false, true, PdfEncodingFactory::GlobalWinAnsiEncodingInstance(), PdfFontCache::eFontCreationFlags_AutoSelectBase14, true, szFontPath);
 }
 
 void PdfSignatureGenerator::InitSignature(int pageIndex, const char* szReason, const char* szReasonLabel, const char* szName, const char* szNameLabel, const char* szLocation, const char* szLocationLabel, const char* szFieldName, const char* szSubFilter)
@@ -137,7 +132,7 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 	
 	LOG_DBG((0, "InitSignature", "PdfSignatureField"));
 
-	m_pSignatureField = new PdfSignatureField(pPage, rect, m_pPdfDocument, PdfString(szFieldName), szSubFilter);		
+	m_pSignatureField = new PdfSignatureField(pPage, rect, m_pPdfDocument);
 
 	LOG_DBG((0, "InitSignature", "PdfSignatureField OK"));
 
@@ -147,8 +142,7 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 	if(szReason && szReason[0])
 	{
 		PdfString reason(szReason);	
-		PdfString reasonLabel(szReasonLabel);	
-		m_pSignatureField->SetSignatureReason(reasonLabel, reason);
+		m_pSignatureField->SetSignatureReason(reason);
 	}
 	
 	LOG_DBG((0, "InitSignature", "szReason OK"));
@@ -156,8 +150,7 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 	if(szLocation && szLocation[0])
 	{
 		PdfString location(szLocation);
-		PdfString locationLabel(szLocationLabel);
-		m_pSignatureField->SetSignatureLocation(locationLabel, location);
+		m_pSignatureField->SetSignatureLocation(location);
 	}
 
 	LOG_DBG((0, "InitSignature", "szLocation OK"));
@@ -169,24 +162,29 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 
 	if(szName && szName[0])
 	{
-		PdfString name(szName);
-		PdfString nameLabel(szNameLabel);
-		m_pSignatureField->SetSignatureName(nameLabel, name);	
+		PdfName name(szName);
+		m_pSignatureField->SetSignatureCreator(name);
 	}
 	
 	LOG_DBG((0, "InitSignature", "szName OK"));
 
-	m_pSignatureField->SetSignatureSize(SINGNATURE_SIZE);
-	
-	LOG_DBG((0, "InitSignature", "SINGNATURE_SIZE OK"));
-
 	//if((szImagePath && szImagePath[0]) || (szDescription && szDescription[0]))
 	if(width * height > 0)
 	{
 		try
 		{
-            //m_pSignatureField->SetFontSize(5);
-			m_pSignatureField->SetAppearance(szImagePath, szDescription);
+			PdfImage image(m_pPdfDocument);
+			PdfXObject xObj(cropBox, m_pPdfDocument);
+			PdfPainter painter;
+
+			image.LoadFromFile(szImagePath);
+
+			painter.SetPage(&xObj);
+			painter.DrawImage(left0, bottom0, &image);
+			painter.FinishPage();
+
+			m_pSignatureField->SetAppearanceStream(&xObj);
+
 			LOG_DBG((0, "InitSignature", "SetAppearance OK"));
 		}
 		catch( PdfError & error ) 
@@ -210,13 +208,14 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 			LOG_ERR((0, "InitSignature", "SetAppearance unknown error"));			
 		}
 	}
-	
 
+
+/*
 	if(szGraphometricData && szGraphometricData[0])
 		m_pSignatureField->SetGraphometricData(PdfString("Aruba_Sign_Biometric_Data"), PdfString(szGraphometricData), PdfString(szVersion));
 
 	LOG_DBG((0, "InitSignature", "szGraphometricData OK"));
-
+*/
 
 	//	// crea il nuovo doc con il campo di firma
 	//	int fulllen = m_actualLen * 3 + SINGNATURE_SIZE * 2;
@@ -227,7 +226,7 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 	
     LOG_DBG((0, "InitSignature", "m_actualLen %d", m_actualLen));
 	// crea il nuovo doc con il campo di firma
-	int fulllen = m_actualLen * 2 + SINGNATURE_SIZE * 2 + (szGraphometricData ? (strlen(szGraphometricData) + strlen(szVersion) + 100) : 0);
+	int fulllen = m_actualLen * 2 + SINGNATURE_SIZE * 2/* + (szGraphometricData ? (strlen(szGraphometricData) + strlen(szVersion) + 100) : 0)*/;
 
 	
 
@@ -275,34 +274,38 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 
 	LOG_DBG((0, "InitSignature", "Write OK %d", mainDoclen));
 
-	m_pSignOutputDevice->AdjustByteRange();
-
-	LOG_DBG((0, "InitSignature", "AdjustByteRange OK"));
-
 }
 
 void PdfSignatureGenerator::GetBufferForSignature(UUCByteArray& toSign)
 {
 	//int fulllen = m_actualLen * 2 + SINGNATURE_SIZE * 2;
-	int len = m_pSignOutputDevice->GetLength() * 2;
-	
-	char* buffer = new char[len];
-	
-	m_pSignOutputDevice->Seek(0);
-	
-	int nRead = m_pSignOutputDevice->ReadForSignature(buffer, len);
-	if(nRead == -1)
-		throw nRead;
-	
-	toSign.append((BYTE*)buffer, nRead);
-	
-	delete buffer;
+	if(m_pSignOutputDevice->HasSignaturePosition()) {
+		int len = m_pSignOutputDevice->GetLength() * 2;
+		char* buffer = new char[len];
+
+		m_pSignOutputDevice->AdjustByteRange();
+		LOG_DBG((0, "SetSignature", "AdjustByteRange OK"));
+
+		m_pSignOutputDevice->Seek(0);
+
+		int nRead = m_pSignOutputDevice->ReadForSignature(buffer, len);
+		if(nRead == -1)
+			throw nRead;
+
+		toSign.append((BYTE*)buffer, nRead);
+
+		delete buffer;
+	}
 }
 
 void PdfSignatureGenerator::SetSignature(const char* signature, int len)
 {
 	PdfData signatureData(signature, len);
-	m_pSignOutputDevice->SetSignature(signatureData);
+	if(m_pSignOutputDevice->HasSignaturePosition()) {
+		m_pSignOutputDevice->SetSignature(signatureData);
+		LOG_DBG((0, "SetSignature", "SetSignature OK"));
+	}
+	m_pSignOutputDevice->Flush();
 }
 
 void PdfSignatureGenerator::GetSignedPdf(UUCByteArray& signedPdf)
-- 
2.43.5

