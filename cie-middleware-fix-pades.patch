From 6298d0b8f11bb756a0529a783a85e555e5049c83 Mon Sep 17 00:00:00 2001
From: Luca Magrone <luca@magrone.cc>
Date: Sun, 20 Oct 2024 03:29:27 +0200
Subject: [PATCH] cie_sign_sdk: PdfSignatureGenerator: Rewrite implementation
 of PADES signature

As of now the code relies on a closed-source version of PoDoFo.
Write a new implementation of the PdfSignatureGenerator class based on
the code from podofosign and the old code of the class. Try to match
behaviour to the behaviour of versions for other platforms.
Use open-source PoDoFo version 0.9.8 API.
Also fix loading document for verification with the correct method.

Signed-off-by: Luca Magrone <luca@magrone.cc>
---
 CIEID/src/it/ipzs/cieid/MainFrame.java       |   6 +-
 cie_sign_sdk/include/PdfSignatureGenerator.h |   2 -
 cie_sign_sdk/src/PdfSignatureGenerator.cpp   | 301 ++++++++++---------
 cie_sign_sdk/src/PdfVerifier.cpp             |   6 +-
 4 files changed, 169 insertions(+), 146 deletions(-)

diff --git a/CIEID/src/it/ipzs/cieid/MainFrame.java b/CIEID/src/it/ipzs/cieid/MainFrame.java
index ac56eca..cfe9270 100644
--- a/CIEID/src/it/ipzs/cieid/MainFrame.java
+++ b/CIEID/src/it/ipzs/cieid/MainFrame.java
@@ -2845,7 +2845,7 @@ public class MainFrame extends JFrame {
 
     private void drawText(String text, String path) {
         BufferedImage bufferedImage = new BufferedImage(1, 1,
-                BufferedImage.TYPE_INT_RGB);
+                BufferedImage.TYPE_INT_ARGB);
         Graphics graphics = bufferedImage.getGraphics();
 
         try {
@@ -2890,10 +2890,10 @@ public class MainFrame extends JFrame {
             graphics.setFont(customFont.deriveFont(Font.LAYOUT_LEFT_TO_RIGHT, 150f));
             FontMetrics fM = graphics.getFontMetrics();
             bufferedImage = new BufferedImage(fM.stringWidth(text), fM.getHeight(),
-                                              BufferedImage.TYPE_INT_RGB);
+                                              BufferedImage.TYPE_INT_ARGB);
             graphics = bufferedImage.getGraphics();
             graphics.setFont(customFont.deriveFont(Font.LAYOUT_LEFT_TO_RIGHT, 150f));
-            graphics.setColor(Color.white);
+            graphics.setColor(new Color(255, 255, 255,0));
             graphics.fillRect(0, 0, fM.stringWidth(text), fM.getHeight());
             graphics.setColor(Color.BLACK);
             graphics.drawString(text, 0, fM.getAscent());
diff --git a/cie_sign_sdk/include/PdfSignatureGenerator.h b/cie_sign_sdk/include/PdfSignatureGenerator.h
index 5a19d6f..024d107 100644
--- a/cie_sign_sdk/include/PdfSignatureGenerator.h
+++ b/cie_sign_sdk/include/PdfSignatureGenerator.h
@@ -40,8 +40,6 @@ public:
 	
 	void GetSignedPdf(UUCByteArray& signature);
 	
-	void AddFont(const char* szFontName, const char* szFontPath);
-	
 	const double getWidth(int pageIndex);
 	
 	const double getHeight(int pageIndex);
diff --git a/cie_sign_sdk/src/PdfSignatureGenerator.cpp b/cie_sign_sdk/src/PdfSignatureGenerator.cpp
index be4dc0c..a0c4726 100644
--- a/cie_sign_sdk/src/PdfSignatureGenerator.cpp
+++ b/cie_sign_sdk/src/PdfSignatureGenerator.cpp
@@ -6,12 +6,18 @@
  *  Copyright 2012 __MyCompanyName__. All rights reserved.
  *
  */
+#include <iostream>
+#include <fstream>
 
 #include "PdfSignatureGenerator.h"
 #include "PdfVerifier.h"
 #include "UUCLogger.h"
 
 #define SINGNATURE_SIZE 10000
+#define MAX_TMP 1000
+#define FONT_NAME "DejaVu Sans"
+#define FONT_SIZE 5.0
+#define TXT_PAD 5
 
 #ifdef CreateFont
 #undef CreateFont
@@ -27,10 +33,7 @@ USE_LOG;
 
 PdfSignatureGenerator::PdfSignatureGenerator()
 : m_pPdfDocument(NULL), m_pSignatureField(NULL), m_pSignOutputDevice(NULL), m_pFinalOutDevice(NULL),
-m_pMainDocbuffer(NULL), m_pSignDocbuffer(NULL)
-{
-	PoDoFo::PdfError::EnableLogging(false);
-}
+m_pMainDocbuffer(NULL), m_pSignDocbuffer(NULL) {}
 
 PdfSignatureGenerator::~PdfSignatureGenerator()
 {
@@ -61,25 +64,16 @@ int PdfSignatureGenerator::Load(const char* pdf, int len)
 	
 	try
 	{
-        printf("PDF");
-        //printf("%s", (char *)pdf);
-        printf("LENGTH");
-        printf("%i", len);
-        printf("STOP");
+		printf("Pdf len: %d\n", len);
 
 		m_pPdfDocument = new PdfMemDocument();
-		m_pPdfDocument->Load(pdf, len);
+		m_pPdfDocument->LoadFromBuffer(pdf, len, true);
+
 		printf("OK m_pPdfDocument");
-		int nSigns = PDFVerifier::GetNumberOfSignatures(m_pPdfDocument);
-		printf("OK nSigns: %d", nSigns);
 
-		if(nSigns > 0)
-		{
-			m_pPdfDocument->SetIncrementalUpdates(true);
-		}
 		m_actualLen = len;
 		
-		return nSigns;
+		return PDFVerifier::GetNumberOfSignatures(m_pPdfDocument);
 	}
     catch(::PoDoFo::PdfError& err)
     {
@@ -91,16 +85,6 @@ int PdfSignatureGenerator::Load(const char* pdf, int len)
 	}
 }
 
-void PdfSignatureGenerator::AddFont(const char* szFontName, const char* szFontPath)
-{
-	//printf(szFontName);
-	//printf(szFontPath);
-	
-	
-	PdfFont* font = m_pPdfDocument->CreateFont(szFontName, false, false, PdfEncodingFactory::GlobalWinAnsiEncodingInstance(), PdfFontCache::eFontCreationFlags_AutoSelectBase14, true, szFontPath);
-	PdfFont* font1 = m_pPdfDocument->CreateFont(szFontName, true, false, PdfEncodingFactory::GlobalWinAnsiEncodingInstance(), PdfFontCache::eFontCreationFlags_AutoSelectBase14, true, szFontPath);
-}
-
 void PdfSignatureGenerator::InitSignature(int pageIndex, const char* szReason, const char* szReasonLabel, const char* szName, const char* szNameLabel, const char* szLocation, const char* szLocationLabel, const char* szFieldName, const char* szSubFilter)
 {
 	LOG_DBG((0, "quella con tutti 0\n", ""));
@@ -115,187 +99,227 @@ void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float botto
 
 void PdfSignatureGenerator::InitSignature(int pageIndex, float left, float bottom, float width, float height, const char* szReason, const char* szReasonLabel, const char* szName, const char* szNameLabel, const char* szLocation, const char* szLocationLabel, const char* szFieldName, const char* szSubFilter, const char* szImagePath, const char* szDescription, const char* szGraphometricData, const char* szVersion)
 {
-	LOG_DBG((0, "--> InitSignature", "%d, %f, %f, %f, %f, %s, %s, %s, %s, %s, %s, %s, %s", pageIndex, left, bottom, width, height, szReason, szName, szLocation, szFieldName, szSubFilter, szImagePath, szGraphometricData, szVersion));
+	printf("--> InitSignature %d, %f, %f, %f, %f, %s, %s, %s, %s, %s, %s, %s, %s\n", pageIndex, left, bottom, width, height, szReason, szName, szLocation, szFieldName, szSubFilter, szImagePath, szGraphometricData, szVersion);
     //LOG_DBG((0, "--> InitSignature", ""));
     
-             
 	if(m_pSignatureField)
 		delete m_pSignatureField;
 
 	PdfPage* pPage = m_pPdfDocument->GetPage(pageIndex);
-    PdfRect cropBox = pPage->GetCropBox();
-    
-    float left0 = left * cropBox.GetWidth();
-    float bottom0 = cropBox.GetHeight() - (bottom * cropBox.GetHeight());
+	PdfRect cropBox = pPage->GetCropBox();
+
+	float cropBoxWidth = cropBox.GetWidth();
+	float cropBoxHeight = cropBox.GetHeight();
     
-    float width0 = width * cropBox.GetWidth();
-    float height0 = height * cropBox.GetHeight();
+	float left0 = left * cropBoxWidth;
+	float bottom0 = cropBoxHeight - (bottom * cropBoxHeight);
     
-    printf("pdf rect: %f, %f, %f, %f\n", left0, bottom0, width0, height0);
+	float width0 = width * cropBoxWidth;
+	float height0 = height * cropBoxHeight;
     
+	LOG_DBG((0, "InitSignature", "m_actualLen %d", m_actualLen));
+	int fulllen = m_actualLen * 2 + SINGNATURE_SIZE * 2;
+
+	printf("pdf rect: %f, %f, %f, %f\n", left0, bottom0, width0, height0);
+
 	PdfRect rect(left0, bottom0, width0, height0);
-	
+
 	LOG_DBG((0, "InitSignature", "PdfSignatureField"));
 
-	m_pSignatureField = new PdfSignatureField(pPage, rect, m_pPdfDocument, PdfString(szFieldName), szSubFilter);		
+	m_pSignatureField = new PdfSignatureField(pPage, rect, m_pPdfDocument);
 
 	LOG_DBG((0, "InitSignature", "PdfSignatureField OK"));
 
-	//if(width * height == 0)
-	//	m_pSignatureField->SetHighlightingMode(ePdfHighlightingMode_None);
-	
+	// This is the card holder's name
+	// Shouldn't this go in /Name? Goes in /Reason
 	if(szReason && szReason[0])
 	{
-		PdfString reason(szReason);	
-		PdfString reasonLabel(szReasonLabel);	
-		m_pSignatureField->SetSignatureReason(reasonLabel, reason);
+		PdfString name(szReason);
+		m_pSignatureField->SetSignatureReason(name);
 	}
-	
+
 	LOG_DBG((0, "InitSignature", "szReason OK"));
 
+	// /T: SignatureN
+	if(szFieldName && szFieldName[0])
+	{
+		// This corresponds to /T
+		PdfString fieldName = PdfString(szFieldName);
+		m_pSignatureField->SetFieldName(fieldName);
+	}
+
+	LOG_DBG((0, "InitSignature", "szFieldName OK"));
+
 	if(szLocation && szLocation[0])
 	{
 		PdfString location(szLocation);
-		PdfString locationLabel(szLocationLabel);
-		m_pSignatureField->SetSignatureLocation(locationLabel, location);
+		m_pSignatureField->SetSignatureLocation(location);
 	}
 
 	LOG_DBG((0, "InitSignature", "szLocation OK"));
 
 	PdfDate now;
 	m_pSignatureField->SetSignatureDate(now);
-	
+
 	LOG_DBG((0, "InitSignature", "Date OK"));
 
+	// This is the signature date
+	// Shouldn't this go in /M? Goes in /Name
 	if(szName && szName[0])
 	{
-		PdfString name(szName);
-		PdfString nameLabel(szNameLabel);
-		m_pSignatureField->SetSignatureName(nameLabel, name);	
+		m_pSignatureField->GetSignatureObject()->GetDictionary().AddKey(PdfName("Name"),
+				PdfObject(PdfString(szName)));
 	}
-	
-	LOG_DBG((0, "InitSignature", "szName OK"));
 
-	m_pSignatureField->SetSignatureSize(SINGNATURE_SIZE);
-	
-	LOG_DBG((0, "InitSignature", "SINGNATURE_SIZE OK"));
+	LOG_DBG((0, "InitSignature", "szName OK"));
 
-	//if((szImagePath && szImagePath[0]) || (szDescription && szDescription[0]))
+	// Create graphical signature with stamp if we have a picture
 	if(width * height > 0)
 	{
+		PdfXObject sigXObject (rect, m_pPdfDocument);
+		PdfPainter painter;
+
 		try
 		{
-            //m_pSignatureField->SetFontSize(5);
-			m_pSignatureField->SetAppearance(szImagePath, szDescription);
-			LOG_DBG((0, "InitSignature", "SetAppearance OK"));
-		}
-		catch( PdfError & error ) 
-		{
-			LOG_ERR((0, "InitSignature", "SetAppearance error: %s, %s", PdfError::ErrorMessage(error.GetError()), error.what()));			
-		}
-		catch( PdfError * perror ) 
-		{
-			LOG_ERR((0, "InitSignature", "SetAppearance error2: %s, %s", PdfError::ErrorMessage(perror->GetError()), perror->what()));			
-		}
-		catch(std::exception& ex)
-		{
-			LOG_ERR((0, "InitSignature", "SetAppearance std exception, %s", ex.what()));			
-		}
-		catch(std::exception* pex)
-		{
-			LOG_ERR((0, "InitSignature", "SetAppearance std exception2, %s", pex->what()));			
-		}
-		catch(...)
-		{
-			LOG_ERR((0, "InitSignature", "SetAppearance unknown error"));			
-		}
-	}
-	
-
-	if(szGraphometricData && szGraphometricData[0])
-		m_pSignatureField->SetGraphometricData(PdfString("Aruba_Sign_Biometric_Data"), PdfString(szGraphometricData), PdfString(szVersion));
-
-	LOG_DBG((0, "InitSignature", "szGraphometricData OK"));
+			char* imgBuffer;
+			double scale;
+			streampos imgBufferSize;
+			ifstream img(szImagePath, ios::in|ios::binary|ios::ate);
+			std::string signatureStamp;
+			PdfImage image(m_pPdfDocument);
+
+			// Copy the image in a buffer
+			if(img.is_open())
+			{
+				imgBufferSize = img.tellg();
+				imgBuffer = new char[imgBufferSize];
+				img.seekg(0, ios::beg);
+				img.read(imgBuffer, imgBufferSize);
+				img.close();
+			}
 
+			// Increase space we have to allocate
+			fulllen += imgBufferSize * 2;
 
-	//	// crea il nuovo doc con il campo di firma
-	//	int fulllen = m_actualLen * 3 + SINGNATURE_SIZE * 2;
-	//	m_pMainDocbuffer = new char[fulllen];
-	//	PdfOutputDevice pdfOutDevice(m_pMainDocbuffer, fulllen);	
-	//	m_pPdfDocument->Write(&pdfOutDevice);
-	//	int mainDoclen = pdfOutDevice.GetLength();
-	
-    LOG_DBG((0, "InitSignature", "m_actualLen %d", m_actualLen));
-	// crea il nuovo doc con il campo di firma
-	int fulllen = m_actualLen * 2 + SINGNATURE_SIZE * 2 + (szGraphometricData ? (strlen(szGraphometricData) + strlen(szVersion) + 100) : 0);
+			// Generate signature string
+			// Append date
+			if(szName && szName[0])
+				signatureStamp.append(szName);
 
-	
+			// Append name
+			if(szReason && szReason[0])
+			{
+				signatureStamp.append("\n");
+				signatureStamp.append(szReason);
+			}
 
-	int mainDoclen = 0;
-	m_pMainDocbuffer = NULL;
-	while (!m_pMainDocbuffer) {
-		try{
-            LOG_DBG((0, "InitSignature", "fulllen %d", fulllen));
-			m_pMainDocbuffer = new char[fulllen];
-			PdfOutputDevice pdfOutDevice(m_pMainDocbuffer, fulllen);
-			m_pPdfDocument->Write(&pdfOutDevice);
-			mainDoclen = pdfOutDevice.GetLength();
+			image.LoadFromPngData((const unsigned char*)imgBuffer, imgBufferSize);
+			// Scale using width to try to avoid squeezing image
+			scale = (width0 / image.GetWidth());
+
+			// Draw signature
+			painter.SetPage(&sigXObject);
+			painter.Save();
+			painter.Restore();
+			painter.DrawImage(left0, bottom0, &image, scale, scale);
+
+			// Release buffer memory
+			delete[] imgBuffer;
+
+			// Create signature stamp
+			PdfFont* font = m_pPdfDocument->CreateFont(FONT_NAME, false,
+					PdfEncodingFactory::GlobalWinAnsiEncodingInstance(),
+					// We set no embedding but it doesn't work
+					PdfFontCache::eFontCreationFlags_AutoSelectBase14, false);
+			printf("Font found: code %s\n", font->GetIdentifier().GetName().c_str());
+			painter.SetFont(font);
+			font->SetFontSize(FONT_SIZE);
+			painter.DrawMultiLineText(PdfRect(left0 + TXT_PAD,
+						bottom0 - TXT_PAD,
+						width0, height0),
+					PdfString(signatureStamp));
+
+			m_pSignatureField->SetAppearanceStream(&sigXObject);
+
+			LOG_DBG((0, "InitSignature", "SetAppearanceStream OK"));
+
+			// Remove the font we embedded
+			m_pPdfDocument->GetAcroForm()->GetObject()->GetDictionary().RemoveKey(PdfName("DR"));
+			m_pPdfDocument->GetAcroForm()->GetObject()->GetDictionary().RemoveKey(PdfName("DA"));
 		}
-		catch (::PoDoFo::PdfError err) {
-			if(m_pMainDocbuffer) {
-				delete m_pMainDocbuffer;
-				m_pMainDocbuffer = NULL;
+		catch( PdfError & error ) 
+		{
+			LOG_ERR((0, "InitSignature", "SetAppearanceStream error: %s, %s", PdfError::ErrorMessage(error.GetError()), error.what()));
+			if(painter.GetPage())
+			{
+				try
+				{
+					painter.FinishPage();
+				}
+				catch(...)
+				{
+				}
 			}
-            
-            LOG_DBG((0, "PdfError", "what %s", err.what()));
-			fulllen *= 2;
 		}
+
+		painter.FinishPage();
 	}
-	
-	LOG_DBG((0, "InitSignature", "m_pMainDocbuffer %d", fulllen));
 
-	
-	// alloca un SignOutputDevice
+	// Set SubFilter
+	if(szSubFilter && szSubFilter[0])
+	{
+		m_pSignatureField->GetSignatureObject()->GetDictionary().AddKey("SubFilter",
+					PdfName(szSubFilter));
+	}
+
+	// Add /SigFlags
+	pdf_int64 flags = 3;
+	m_pPdfDocument->GetAcroForm()->GetObject()->GetDictionary().AddKey(PdfName("SigFlags"),
+			PdfObject(flags));
+
+	LOG_DBG((0, "InitSignature", "fulllen %d", fulllen));
+
 	m_pSignDocbuffer = new char[fulllen];
 
 	LOG_DBG((0, "InitSignature", "m_pSignDocbuffer %d", fulllen));
 
-	m_pFinalOutDevice = new PdfOutputDevice(m_pSignDocbuffer, fulllen);		
+	m_pFinalOutDevice = new PdfOutputDevice(m_pSignDocbuffer, fulllen);
 	m_pSignOutputDevice = new PdfSignOutputDevice(m_pFinalOutDevice);
 
 	LOG_DBG((0, "InitSignature", "buffers OK %d", fulllen));
 
-	// imposta la firma
 	m_pSignOutputDevice->SetSignatureSize(SINGNATURE_SIZE);
-	
-	LOG_DBG((0, "InitSignature", "SetSignatureSize OK %d", SINGNATURE_SIZE));
-
-	// Scrive il documento reale
-	m_pSignOutputDevice->Write(m_pMainDocbuffer, mainDoclen);
 
-	LOG_DBG((0, "InitSignature", "Write OK %d", mainDoclen));
-
-	m_pSignOutputDevice->AdjustByteRange();
-
-	LOG_DBG((0, "InitSignature", "AdjustByteRange OK"));
+	LOG_DBG((0, "InitSignature", "SetSignatureSize OK %d", SINGNATURE_SIZE));
 
+	m_pSignatureField->SetSignature(*m_pSignOutputDevice->GetSignatureBeacon());
+	try
+	{
+		m_pPdfDocument->WriteUpdate(m_pSignOutputDevice);
+	}
+	catch(::PoDoFo::PdfError err)
+	{
+		printf("PdfError: %s\n", err.what());
+	}
 }
 
 void PdfSignatureGenerator::GetBufferForSignature(UUCByteArray& toSign)
 {
-	//int fulllen = m_actualLen * 2 + SINGNATURE_SIZE * 2;
 	int len = m_pSignOutputDevice->GetLength() * 2;
-	
 	char* buffer = new char[len];
-	
+	int nRead;
+
+	m_pSignOutputDevice->AdjustByteRange();
+	LOG_DBG((0, "SetSignature", "AdjustByteRange OK"));
+
 	m_pSignOutputDevice->Seek(0);
-	
-	int nRead = m_pSignOutputDevice->ReadForSignature(buffer, len);
+
+	nRead = m_pSignOutputDevice->ReadForSignature(buffer, len);
 	if(nRead == -1)
 		throw nRead;
-	
+
 	toSign.append((BYTE*)buffer, nRead);
-	
+
 	delete buffer;
 }
 
@@ -303,6 +327,7 @@ void PdfSignatureGenerator::SetSignature(const char* signature, int len)
 {
 	PdfData signatureData(signature, len);
 	m_pSignOutputDevice->SetSignature(signatureData);
+	m_pSignOutputDevice->Flush();
 }
 
 void PdfSignatureGenerator::GetSignedPdf(UUCByteArray& signedPdf)
diff --git a/cie_sign_sdk/src/PdfVerifier.cpp b/cie_sign_sdk/src/PdfVerifier.cpp
index 2285603..01279fc 100644
--- a/cie_sign_sdk/src/PdfVerifier.cpp
+++ b/cie_sign_sdk/src/PdfVerifier.cpp
@@ -42,7 +42,7 @@ int PDFVerifier::Load(const char* pdf, int len)
 	try
 	{
 		m_pPdfDocument = new PdfMemDocument();
-		m_pPdfDocument->Load(pdf, len);
+		m_pPdfDocument->LoadFromBuffer(pdf, len, false);
 		m_actualLen = len;
 		m_szDocBuffer = (char*)pdf;
 		
@@ -66,7 +66,7 @@ int PDFVerifier::Load(const char* szFilePath)
     try
     {
         m_pPdfDocument = new PdfMemDocument();
-        m_pPdfDocument->Load(szFilePath);
+        m_pPdfDocument->Load(szFilePath, false);
         
         BYTE buffer[BUFFERSIZE];
         int nRead = 0;
@@ -109,7 +109,7 @@ int PDFVerifier::GetNumberOfSignatures(const char* szFilePath)
     
     try {
         
-        doc.Load(szFilePath);
+        doc.Load(szFilePath, false);
         
         pfnCrashliticsLog("file loaded");
         
-- 
2.43.5

